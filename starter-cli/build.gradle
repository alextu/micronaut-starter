plugins {
    id 'io.micronaut.internal.build.starter-cli-module'
}

ext {
    picocliVersion = '4.6.1'
}

configurations {
    generateConfig
}

configurations.all {
    resolutionStrategy {
        // prevent fatJar result containing multiple versions of picocli
        force("info.picocli:picocli:$picocliVersion")
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-graal")
    api project(":starter-core")
    api "info.picocli:picocli:${picocliVersion}"
    api "info.picocli:picocli-shell-jline3:${picocliVersion}"
    api "com.fizzed:rocker-runtime:$rockerVersion"

    implementation "org.slf4j:slf4j-nop:1.7.30"

    compileOnly "org.graalvm.nativeimage:svm"

    implementation "org.fusesource.jansi:jansi:1.18"
    implementation "org.yaml:snakeyaml:1.28"

    implementation group: 'javax.inject', name: 'javax.inject', version: '1'

    implementation 'org.shredzone.acme4j:acme4j-client:2.11'
    implementation 'org.shredzone.acme4j:acme4j-utils:2.12'

    generateConfig "info.picocli:picocli-codegen:${picocliVersion}"

    testImplementation("io.micronaut.picocli:micronaut-picocli")

    testImplementation "org.testcontainers:spock"
    testImplementation 'org.reflections:reflections:0.9.12'
}

application {
    mainClass = "io.micronaut.starter.cli.MicronautStarter"
}

rocker {
    // (All settings are shown with their defaults)
    //
    // Skips building templates all together
    skip false
    // Base directory for generated java sources, actual target is sub directory
    // with the name of the source set. The value is passed through project.file().
    outputBaseDirectory = "$buildDir/generated-src/rocker"
    // Base directory for the directory where the hot reload feature
    // will (re)compile classes to at runtime (and where `rocker-compiler.conf`
    // is generated, which is used by RockerRuntime.getInstance().setReloading(true)).
    // The actual target is a sub directory with the name of the source set.
    // The value is passed through project.file().
    classBaseDirectory = "$buildDir/classes"
    failOnError true
    skipTouch true
    // must not be empty when skipTouch is equal to false
    touchFile ""
    javaVersion '1.8'
    extendsClass null
    extendsModelClass null
    optimize true
    discardLogicWhitespace = true
    targetCharset null
    suffixRegex null
    postProcessing = ['io.micronaut.starter.rocker.WhitespaceProcessor']
    markAsGenerated null
}

startScripts {
    applicationName = 'mn'
}

sdkman {
    api = "https://vendors.sdkman.io"
    consumerKey = System.getenv("GVM_SDKVENDOR_KEY") ?: project.hasProperty("gvmSdkvendorKey") ? project.gvmSdkvendorKey : ''
    consumerToken = System.getenv("GVM_SDKVENDOR_TOKEN") ?: project.hasProperty("gvmSdkvendorToken") ? project.gvmSdkvendorToken : ''
    candidate = "micronaut"
    version = project.version
    hashtag = "#micronautfw"
    platforms = [
            "MAC_OSX":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-darwin-amd64-v${project.version}.zip",
            "WINDOWS_64":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-win-amd64-v${project.version}.zip",
            "LINUX_64":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-linux-amd64-v${project.version}.zip"
    ]
}
