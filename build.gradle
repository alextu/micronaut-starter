buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath 'io.micronaut.build.internal:micronaut-gradle-plugins:4.0.0'
    }
}

repositories {
    mavenCentral()
}

version project.projectVersion

subprojects { Project subproject ->
    repositories {
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }

    version project.projectVersion
    group "io.micronaut.starter"
    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    apply plugin: "io.micronaut.build.internal.common"

    spotless {
      java {
        target 'src/main/java/**/*.java'
      }
    }

    if (subproject.hasProperty("publish") && subproject.publish) {
        apply plugin: "io.micronaut.build.internal.publishing"
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (project.name.startsWith("test-")) {
                    if (details.requested.group == "org.codehaus.groovy") {
                        details.useVersion(groovyVersion)
                    }
                    if (details.requested.name == "spock-core") {
                        details.useVersion(spockVersion)
                    }
                } else {
                    //multiple actions can be specified
                    if (details.requested.group == "org.codehaus.groovy") {
                        details.useVersion(groovyVersion)
                    }
                    if (details.requested.name == "spock-core") {
                        details.useVersion(spockVersion)
                    }
                }
            }
        }
    }

    dependencies {
        if (project.name.startsWith("test-")) {
            implementation gradleTestKit()
        } else {
            annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
            implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
            annotationProcessor "io.micronaut:micronaut-inject-java"
            testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
            testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        }
        testImplementation("org.codehaus.groovy:groovy:$groovyVersion")
        testImplementation("org.spockframework:spock-core:$spockVersion") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
    }


    tasks.withType(Test) {
        if (!project.name.startsWith("test-")) {
            testLogging {
                exceptionFormat = 'full'
            }
            forkEvery = 100
            maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
            maxHeapSize = "2G"
        }
    }

}

apply plugin: "io.micronaut.build.internal.docs"
